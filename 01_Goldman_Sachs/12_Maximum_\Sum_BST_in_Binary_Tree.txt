Leetcode 1373

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 
class Solution {
    int maxsum = 0 ;
    public int maxSumBST(TreeNode root) {
        if(root == null ) return 0 ;

        traverse(root) ;
        return maxsum ;
    }

    class Result{
        int lower , upper , sum ;
        public Result( int lower , int upper , int sum )
        {
            this.lower = lower ;
            this.upper = upper ;
            this.sum = sum ;
        }
    }

    public Result traverse(TreeNode node)
    {
        if( node == null ) 
            return new Result(Integer.MAX_VALUE, Integer.MIN_VALUE , 0 ) ;

        Result left = traverse(node.left) ;
        Result right = traverse(node.right) ;

        if( left == null || right == null ) 
            return null ;

        if( node.val <= left.upper || node.val >= right.lower )
            return null ;

        maxsum = Math.max(maxsum , node.val + left.sum + right.sum ) ;
        int lower = Math.min(node.val, left.lower ) ;
        int upper = Math.max(node.val , right.upper ) ;
        return new Result(lower,upper,left.sum + right.sum + node.val ) ;

    }
}